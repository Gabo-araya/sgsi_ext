- name: deploy
  hosts: all
  gather_facts: "{{ false if 'update' in ansible_run_tags else true }}"

  vars:
    create_dotenv: "{{ lookup('env', 'create_dotenv')|default('0') == '1' }}"
    created_env_path: ../../deploy.{{ ansible_limit }}.env

  tasks:
    - name: copy created .env from controller
      copy:
        src: "{{ created_env_path }}"
        dest: "{{ project_name }}/.env"
        mode: "600"
        force: no
      when: create_dotenv
      register: dotenv_copy

      failed_when: not dotenv_copy.changed
      # If the file didn't change, it already existed,
      # so stop because we're not using the file we wanted to.
      # The existing file won't be overriden because of "force: no".

    - name: delete created .env from controller
      # To avoid keeping plaintext secrets outside server
      local_action:
        module: file
        path: "{{ created_env_path }}"
        state: absent
      when: create_dotenv

    - import_role:
        name: git-clonepull
      tags: update

    - name: backup DB on code changes
      include_role:
        name: backup-db
        apply:
          tags: update
      # Skip backup if no changes:
      # (or if this was the first clone, ran by deploy.sh,
      # and then no changes with pull in this playbook)
      when: git_result.changed
      tags: update

    - name: set .env vars from server
      lineinfile:
        path: "{{ project_name }}/.env"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      loop:
        - regexp: ^ALLOWED_HOST=
          line: ALLOWED_HOST={{ server_domain }}
        - regexp: ^WHO=
          line: WHO={{ ansible_user_id }}
        - regexp: ^HOST_UID=
          line: HOST_UID={{ ansible_user_uid }}
        - regexp: ^HOST_GID=
          line: HOST_GID={{ ansible_user_gid }}

    - name: create nginx.env
      template:
        src: templates/nginx.env.j2
        dest: "{{ project_name }}/docker/nginx.env"
        force: yes  # Overwrites in case server_domain changes

    - name: symlink default override file to production compose
      # This is to use docker-compose CLI without "-f"
      file:
        src: "docker/docker-compose.prod.yml"
        path: "{{ project_name }}/docker-compose.override.yml"
        state: link

    - name: install apt packages
      apt:
        name:
          - pv    # Progress for dump download
        state: present
      become: yes

    - name: enable Docker BuildKit
      copy:
        src: files/docker_daemon.json
        dest: /etc/docker/daemon.json
        force: yes  # We assume the server is exclusive for this project, so manage this file with Ansible only.
      become: yes
      register: docker_daemon

    - name: restart Docker service if config changed
      service:
        name: docker.service
        state: restarted
      become: yes
      when: docker_daemon.changed

    - name: make free space by pruning dangling images
      command: docker image prune --force
      register: prune
      changed_when: "'Total reclaimed space: 0B' not in prune.stdout"
      tags: update

    - name: show freed space
      debug:
        msg: "{{ prune.stdout }}"
      changed_when: prune.changed   # Just to match previous task color
      tags: update

    - name: check if nginx will take a long time to start
      stat:
        path: "{{ project_name }}/docker/volumes/nginx_secrets/"
      register: stat_nginx_secrets

    - name: build and start containers
      # Note: "community.docker.docker_compose" requires docker-compose v1 and always disables BuildKit
      shell:
        chdir: "{{ project_name }}"
        cmd: "{{ build_cmd }} && {{ up_cmd }}"  # Two commands because not all build flags are available in up
      vars:
        build_cmd: docker compose build {{ nocache_arg }} {{ pull_arg }}
        up_cmd: docker compose up -d --remove-orphans {{ recreate_arg }}

        nocache_arg: "{{ '--no-cache' if env_cache_ignore == '1' else '' }}"
        pull_arg:    "{{ '--pull'     if env_cache_ignore == '1' else '' }}"
        recreate_arg: "{{ '--force-recreate' if env_recreate == '1' else '' }}"

        env_recreate: "{{ lookup('env', 'deploy_recreate')|default('0') }}"
        env_cache_ignore: "{{ lookup('env', 'deploy_cache_ignore')|default('0') }}"
      environment:
        BUILDKIT_PROGRESS: plain
      changed_when: true  # nvm
      tags: update

    - name: run deployment checks
      command: docker compose exec django dj check --deploy
      # Note: it's possible to fail on warning by appending: --fail-level WARNING
      args:
        chdir: "{{ project_name }}"
      changed_when: false
      failed_when: false
      register: depl_checks
      tags: update

    - name: show deployment checks
      debug:
        msg: "{{ depl_checks.stdout }}\n{{ depl_checks.stderr }}"
        # stdout normally contains the output from "dj check",
        # but in case of errors, the output from compose should be shown as well, for example:
        #   - "cannot exec in a stopped state: unknown" from stdout
        #   - "Error response from daemon: Container 123... is restarting" from stderr
        # The "build and start containers" task run before checks if the containers started,
        # but not that they didn't crash shortly afterwards.
      failed_when: depl_checks.rc > 0
      tags: update

    - name: Set default site name
      command: docker compose exec django dj setsitename --domain "{{ server_domain }}" --name "{{ site_name }}"
      args:
        chdir: "{{ project_name }}"
      register: setsitename_result
      changed_when: "'Nothing to update' not in setsitename_result.stdout"

    - name: Show default site name
      debug:
        msg: "{{ setsitename_result.stdout }}"
      failed_when: setsitename_result.rc > 0

    - name: Restart Django app
      command: docker compose restart django
      args:
        chdir: "{{ project_name }}"
      changed_when: true
      when: setsitename_result is changed

    - name: make a test request to https://{{ server_domain }}
      uri:
        url: https://{{ server_domain }}
        force: yes  # Ensure no cache
      tags: update
      # Skip this check on first deploy, because dhparams generation takes a long time:
      when: >
        stat_nginx_secrets is not defined
        or stat_nginx_secrets.stat.exists
      # "is not defined" because task that registers it has no "update" tag

      # Some retries because nginx may not be ready yet:
      # improvement: what if long migrations are running?
      register: test_req
      until: test_req is succeeded
      retries: 3
      delay: 1
