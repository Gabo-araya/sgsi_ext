- name: restore DB dump
  hosts: all
  gather_facts: no
  tasks:

    - name: stop django
      # 'ERROR:  database "..." is being accessed by other users'
      # "dcstop django":
      community.docker.docker_compose:
        services:
          - django
        state: present
        stopped: yes
        project_src: "{{ project_name }}"
        files:
          - docker-compose.yml
          - docker/docker-compose.prod.yml

    - name: delete database
      command: docker-compose exec postgres sh -c 'dropdb "$PGDATABASE"'
      args:
        chdir: "{{ project_name }}"
      register: dropdb
      failed_when:
        - dropdb is failed
        - "' does not exist' not in (dropdb.stdout | default(''))"

    - name: create database
      command: docker-compose exec postgres sh -c 'createdb "$PGDATABASE"'
      args:
        chdir: "{{ project_name }}"

    - name: restore dump
      command: docker-compose exec postgres sh -c '{{ restore_cmd }}'
      args:
        chdir: "{{ project_name }}"
      vars:
        restore_cmd: >
          pg_restore
          --dbname="$PGDATABASE"
          --no-owner
          --no-acl
          --jobs="{{ jobs }}"
          "db_dumps/{{ dump_name | quote }}"

        # man says: "A good place to start is the number of CPU cores on the server"
        # but if server is remote, just assume 1.
        jobs: $( {{ host_is_remote_test }} && echo 1 || nproc )

        # From magnet-entrypoint.sh:
        host_is_remote_test: '[[ "$PGHOST" != "localhost" && "$PGHOST" != "postgres" ]]'

    - name: start django
      # The entrypoint will run migrations
      community.docker.docker_compose:
        services:
          - django
        state: present
        project_src: "{{ project_name }}"
        files:
          - docker-compose.yml
          - docker/docker-compose.prod.yml
