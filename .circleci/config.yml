version: 2.1
executors:
  base-executor:
    resource_class: medium
    docker:
      - image: cimg/base:stable
        user: root
    environment:
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1
    working_directory: ~/app
jobs:
  build:
    executor: base-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - docker-layers-v1-{{ checksum "Dockerfile" }}
            - docker-layers-v1-
      - setup_remote_docker:
          version: 20.10.11
      - run:
          name: Setup BuildKit driver
          command: |
            docker context create dpt-build-context
            docker buildx create --driver docker-container --name dpt-builder --use dpt-build-context
      - run:
          name: Create output directories
          command: |
            mkdir -p ~/output /tmp/build-cache
      - run:
          name: Build production image
          command: |
            docker buildx build \
              --cache-from type=local,src=/tmp/build-cache \
              --cache-to type=local,dest=/tmp/build-cache,mode=max \
              --output type=docker,dest=- \
              --progress=plain \
              --target production \
              -t "${CIRCLE_PROJECT_REPONAME}:latest" \
              . | gzip > ~/output/${CIRCLE_PROJECT_REPONAME}.tar.gz
      - run:
          name: Build test image
          command: |
            docker buildx build \
              --cache-from type=local,src=/tmp/build-cache \
              --cache-to type=local,dest=/tmp/build-cache,mode=max \
              --output type=docker,dest=- \
              --progress=plain \
              --target test \
              -t "${CIRCLE_PROJECT_REPONAME}-test:latest" \
              . | gzip > ~/output/${CIRCLE_PROJECT_REPONAME}-test.tar.gz
      - persist_to_workspace:
          root: ~/output
          paths:
            - "*.tar.gz"
      - save_cache:
          # Use the standard cache instead of the Docker layer caching service
          # to store the layer cache. Docker layer caching is an additional
          # value-added service that is not available with container-based
          # plans.
          key: docker-layers-v1-{{ checksum "Dockerfile" }}
          paths:
            - /tmp/build-cache/
  test:
    executor: base-executor
    steps:
      - attach_workspace:
          at: ~/output
      - checkout
      - setup_remote_docker:
          version: 20.10.11
      - run:
          name: Load Docker images
          command: |
            set +o pipefail
            gunzip -c ~/output/${CIRCLE_PROJECT_REPONAME}-test.tar.gz | docker load | true
      - run:
          name: Start artifact collector
          command: |
            CONTAINER_ID=$(docker-compose -f docker/docker-compose.ci.yml run -d --user root artifact-collector)
            echo "export COLLECTOR_CONTAINER_ID=$CONTAINER_ID" >> $BASH_ENV
      - run:
          name: Run tests
          command: |
            docker-compose -f docker/docker-compose.ci.yml run app-test poetry run pytest --cov --cov-report=html --cov-report=xml --cov-report=term
      - run:
          name: Copy artifacts
          when: always
          command: |
            docker cp $COLLECTOR_CONTAINER_ID:/artifacts ~/artifacts
            ls ~/artifacts
      - store_test_results:
          path: ~/artifacts/
  code-checks:
    executor: base-executor
    steps:
      - attach_workspace:
          at: ~/output
      - checkout
      - setup_remote_docker:
          version: 20.10.11
      - run:
          name: Load Docker images
          command: |
            set +o pipefail
            gunzip -c ~/output/${CIRCLE_PROJECT_REPONAME}-test.tar.gz | docker load | true
      - run:
          name: Check code style
          command: |
            docker-compose -f docker/docker-compose.ci.yml run app-test poetry run black --check --exclude "^.*\\b(migrations)\b.*$" .
      - run:
          name: Check imports are sorted
          command: |
            docker-compose -f docker/docker-compose.ci.yml run app-test poetry run isort --check .
      - run:
          name: Check for missing migrations
          command: |
            docker-compose -f docker/docker-compose.ci.yml run app-test poetry run ./manage.py makemigrations --check --dry-run

workflows:
  version: 2
  build-test:
    jobs:
      - build
      - test:
          requires:
            - build
      - code-checks:
          requires:
            - build
