[tool.poetry]
name = "project-name-placeholder"
version = "2023.2"
description = "The project template for Django 3.2. This project aims to provide a common starting point for Magnet projects."
authors = ["Magnet DPT3 Team <d3pt@magnet.cl>"]
license = "MIT"

[tool.poetry.dependencies]
python = "~3.10"
# semver packages
django = "~3.2.18"
psycopg2 = "2.9.6"
celery = { version = "~5.2", extras = ["redis"] }
gunicorn = "~20.1.0"
django-celery-beat = "~2.4.0"
django-loginas = "0.3.10"
djangorestframework = "3.14.0"
boto3 = "1.26.54"
ipdb = "0.13.11"
ipython = "8.8.0"
ansible-core = { version = "2.13", optional = true }
yq = { version = "2.14.0", optional = true }
Faker = "14.2.0"
# non-semver packages (or no information found)
django-debug-toolbar = "3.8.1"
django-extensions = "3.2.1"
python-json-logger = "==2.0.4"
django-storages = "1.13.2"
django-webpack-loader = "1.8.0"
django-redis = "5.2.0"
djangorestframework-camel-case = "1.3.0"
inflection = "0.5.1"
pypugjs = "5.9.12"
# calver packages that must be updated always
pytz = ">=2022.2"
django-xff = "^1.3.0"

[tool.poetry.group.dev.dependencies]
ruff = "~0.0.262"

# semver packages
pytest = "7.2.1"
pytest-celery = "^0.0.0"
pytest-cov = "4.0.0"
pytest-django = "4.5.2"
pre-commit = "2.21.0"
watchdog = "2.2.1"
Werkzeug = "2.2.3"

# calver packages
black = "22.12.0"

[tool.poetry.extras]
ansible = ["ansible-core", "yq"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
required_plugins = "pytest-django"
DJANGO_SETTINGS_MODULE = "project.test_settings"
addopts = [
  "-v",
  "--tb=native",
  "--junit-xml=test-results/pytest.xml"
]
python_files = [
  "tests.py",
  "test_*.py",
  "*_tests.py"
]
junit_family = "xunit2"

[tool.coverage.run]
omit = [
  "*/management/*",
  "*/migrations/*",
  "*/test/*",
  "*/tests.py"
]

[tool.ruff]
select = ["S", "DTZ", "PGH", "E", "F", "W", "C90", "N", "UP", "BLE", "B", "A", "COM", "C4", "T10", "DJ", "EM", "ISC", "ICN", "PIE", "T20", "Q", "RET", "SIM", "ERA", "PL", "PLC", "PLE", "PLR", "PLW", "TRY", "RUF", "I"]
ignore = ["COM812", "FBT", "G", "INP", "PYI", "PT", "RSE", "SLF", "TID", "TCH", "INT", "ARG", "PTH", "PD", "NPY"]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "G", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT", "I"]
unfixable = ["ERA"]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 88

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

target-version = "py39"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.per-file-ignores]
"**/migrations/*.py" = ["E501", "N"]


[tool.ruff.isort]
force-single-line = true
lines-between-types = 1
section-order = ["future", "standard-library", "django", "third-party", "first-party", "local-folder"]

[tool.ruff.isort.sections]
django = ["django"]
