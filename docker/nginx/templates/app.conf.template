# This is a template because env vars are replaced.
# https://github.com/docker-library/docs/blob/0887f5ea78ec3e3f0c0804fdd4a320e1f88baea2/nginx/README.md#using-environment-variables-in-nginx-configuration-new-in-119

# SSL config built-in because https://github.com/JonasAlfredsson/docker-nginx-certbot
# obtains certificate only.

# HTTP to HTTPS redirection is handled by the image (see https://github.com/JonasAlfredsson/docker-nginx-certbot/blob/v3.2.1/src/nginx_conf.d/redirector.conf)

# Reference for this config: https://docs.gunicorn.org/en/stable/deploy.html

server {
  listen 443 ssl deferred;
  server_name ${SERVER_DOMAIN};

  root /usr/share/nginx;

  ${ADD_ROBOTS_HEADER}  # "add_header" or nothing, according to ENVIRONMENT_NAME

  location =/robots.txt {
      alias /var/www/robots/${ROBOTS_FILE};  # From ENVIRONMENT_NAME
  }

  location /static {
    try_files $uri =404;
  }

  location /media {
    try_files $uri =404;
  }

  location / {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    proxy_pass http://django:8000;
  }

  # NOTE: to set maximum upload sizes or header buffers see user.conf.d/z.hardening.conf

  charset utf-8;

  gzip on;
  gzip_min_length 1000;
  gzip_proxied any;

  gzip_types
    text/plain
    text/css
    text/xml
    application/xml
    application/xml+rss
    application/json
    application/javascript
    application/x-javascript
    text/javascript;

    # To force-renew certificate, run "docker compose exec nginx /scripts/run_certbot.sh force"
    # https://github.com/JonasAlfredsson/docker-nginx-certbot/blob/v3.0.0-nginx1.21.3/docs/advanced_usage.md#manualforce-renewal
    ssl_certificate         /etc/letsencrypt/live/${SERVER_DOMAIN}/fullchain.pem;
    ssl_certificate_key     /etc/letsencrypt/live/${SERVER_DOMAIN}/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/${SERVER_DOMAIN}/chain.pem;
    ssl_dhparam             /etc/letsencrypt/dhparams/dhparam.pem;
}

# Redirect http://www.example.com to https://example.com:
server {
  listen 80;

  server_name www.${SERVER_DOMAIN}; # certbot_domain:${SERVER_DOMAIN}
  # The comment on the line above prevents requesting a certificate for www.app.example.com.
  #
  # This docker image automatically requests certificates for all "server_name"s it finds,
  # even for this one which listens only on port 80.
  # If the site is hosted on app.example.com, www.app.example.com won't exist,
  # and the certificate request for app.example.com + www.app.example.com will fail.
  # The special "certbot_domain:" comment allows overriding the "server_name" expression.
  # It can't be used to just ignore the server_name at all, but overriding
  # from www.app.example.com to app.example.com has the same effect.

  return 301 https://${SERVER_DOMAIN}$request_uri;
}

# Close connection to wrong domains
# (http://1.2.3.4 returns 301 to https://1.2.3.4, which then nginx rejects)
# https://github.com/JonasAlfredsson/docker-nginx-certbot/blob/v3.0.0-nginx1.21.3/docs/nginx_tips.md#reject-unknown-server-name
server {
  listen 443 ssl default_server;
  ssl_reject_handshake on;
}
